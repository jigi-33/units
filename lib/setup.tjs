/* global requirejs, mocha, Mocha */

//Testing setup
var testing = (function() {
   //Scripts to load
   var scripts = [
      '~ws/ws/ext/requirejs/require.js',
      '~ws/ws/ext/requirejs/config.js'
   ];

   //Exceptions logger
   var logException = function(exception) {
      var node = document.getElementById('exception');
      if (!node) {
         node = document.createElement('div');
         node.setAttribute('id', 'exception');
         document.getElementsByTagName('body')[0].appendChild(node);
      }

      console.error(exception);
      node.textContent += exception.stack || exception;
   };

   //Loads script with DOM element
   var loadScript = function(url) {
      var script = document.createElement('script'),
         startNode = document.getElementById('testing-init');
      script.async = false;
      script.src = url;
      startNode.parentNode.appendChild(script);

      return new Promise(function(resolve, reject) {
         script.addEventListener('load', resolve, false);
         script.addEventListener('error', reject, false);
      });
   };

   //Testing framework setup
   var initTestingFramework = function() {
      mocha.setup({
         ui: 'bdd',
         reporter: function(runner) {
            var query = typeof window === 'undefined' ? '?reporter=XUnit' : window.location.search,
               result = query.match(new RegExp('[?&]reporter=([^&]*)&?$')),
               reporterCode = result ? result[1] : 'HTML';

            var reporter = new Mocha.reporters[reporterCode](runner, {});

            if (reporterCode === 'JSCoverage') {
               reporterCode = 'HTML';
               runner.on('end', function() {
                  reporter.domElement = document.createElement('textarea');
                  reporter.domElement.setAttribute('id', 'report');
                  reporter.domElement.setAttribute('readonly', 'readonly');
                  reporter.domElement.value = JSON.stringify(window.__coverage__);

                  document.getElementsByTagName('body')[0].appendChild(reporter.domElement);
               });
            }

            if (!(reporterCode in Mocha.reporters)) {
               throw new Error('Reporter "' + reporterCode + '" is undefined.');
            }

            if (reporterCode === 'XUnit') {
               //Change XUnit output stream
               reporter.buffer = [];
               reporter.domElement = document.createElement('textarea');
               reporter.domElement.setAttribute('id', 'report');
               reporter.domElement.setAttribute('readonly', 'readonly');
               reporter.write = function(line) {
                  this.buffer.push(line);
                  this.domElement.value = this.buffer.join('\n');
               };

               document.getElementsByTagName('body')[0].appendChild(reporter.domElement);
            }
         }
      });

      window.assert = chai.assert;
   };

   //WS setup
   var initWs = function(config) {
      window.wsConfig = config;
   };

   //Loads standartd scripts
   var loadScripts = function(loadContents, loadJquery) {
      if (loadContents) {
         scripts.unshift('~resources/contents.js');
      }

      if (loadJquery) {
         scripts.unshift('~ws/ws/ext/jquery-full.js');
      }

      return Promise.all(scripts.map(function(url) {
         return loadScript(url);
      }.bind(this)));
   };

   //Load testing code
   var loadTestList = function() {
      return new Promise(function(resolve, reject) {
         requirejs(['Core/core'], function() {
            requirejs(
               ['~test-list'],
               resolve,
               function(err) {
                  logException(err);
                  reject(err);
               }
            );
         }, function(err) {
            logException(err);
            reject(err);
         });
      });
   };

   //Runs testing
   var runTesting = function() {
      mocha.run(finishTesting);
   };

   //After testing finished
   var finishTesting = function() {
      document.getElementsByTagName('body')[0].className += ' tests-finished';
   };

   return {
      title: '{{TITLE}} v.{{VERSION}}',

      loadJquery: true,

      loadContents: {{WS_CONTENTS_LOAD}},

      //Init testing
      init: function() {
         if (this.title) {
            document.title = this.title;
         }

         initTestingFramework();
         this.configure();
         initWs(this.wsConfig);

         return loadScripts(this.loadContents, this.loadJquery);
      },

      //Run testing
      run: function() {
         loadTestList().then(runTesting);
      },

      //Custom configuration setup
      configure: function() {
         mocha.checkLeaks();
      },

      //WS config getter
      get wsConfig() {
         return {
            wsRoot: '~ws/ws/',
            cdnRoot: '~ws/ws/lib/Ext/',
            resourceRoot: '~resources/'
         };
      }
   };
})();

{{POST_SCRIPTS}}
